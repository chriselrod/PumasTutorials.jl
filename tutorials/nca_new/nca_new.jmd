---
title : Non Compartmental Analysis
author : Parsshava R Mehta
date : 19th June 2020
---

Load the necessary libraries

```julia
using Pumas, Plots, CSV, DataFrames, StatsPlots, Statistics
```

## Introduction

In this tutorial you will learn how to compute specific parameters using Non-Compartmental Analysis


The given dataset contains a total of 107 subjects who receive an oral dose of 50mg every 24hours for 5 days starting a `time=0`.
We will compute _**Single Dose**_ and _**Multiple Dose**_ NCA parameters

In the given dataset
 * Time  = hrs
 * Conc  = mg/L
 * Amt   = mg

**Step1:** Load the NCA dataset using the `CSV.read` function and convert it to a Dataframe

```julia
data = CSV.read("NCA_tutorial.csv")
df1  = DataFrame(data)
first(df1, 6)
```

Plot a exploratory graph of **Concentration vs Time** and group each subject by the specific `ID` assigned.

```julia
@df df1 plot(:TIME, :DV, group=:ID, xlabel="Time (hrs)", ylabel="Concentration (mg/L)", xticks=[0,12,24,36,48,60,72,84,96,108,120], label=false)
```

#### Single-dose NCA

Filter data for time <= 24 hrs to perform the Single-dose NCA


```julia
df2  = filter(x -> x.TIME <= 24 , df1)
```

We will specify the units of time, concentration and amount which will be mapped to `read_nca`

```julia
timeu = u"hr"
concu = u"mg/L"
amtu  = u"mg";
```

Parse the dataframe to a `read_nca` function and map the necessary columns from the dataset

 * id
 * conc
 * time
 * ocassion - if you have different ocassions
 * amt
 * route - Infusion "inf", IV "iv", Oral "ev"
 * duration - Only for Infusion
 * group - any other grouping variables that you require in the output


**Note:**

 * If your datset has the specific style of headers for the column you _will not need_ to map them seperately. They will be
automatically determined by PUMAS. eg: id, time, conc, amt, route, duration(if needed), ocassion(if needed), group(if needed)

 * _Do not specify the Inter Dose Interval_ in this case because we are computing Single-Dose NCA parameters

```julia
pop        = read_nca(  df2,
                        id    = :ID,
                        time  = :TIME,
                        conc  = :DV,
                        amt   = :AMT,
                        route = :ROUTE,
                        llq   = 0.001concu,
                        timeu = timeu,
                        concu = concu,
                        amtu  = amtu
                      )
report     = NCAReport(pop, sigdigits=3)
```

##### Compute Specific Parameters

We will now compute the specific parameters that we require and merge all of them to a dataframe

```julia
vz        = NCA.vz(pop, sigdigits=3)  # Volume of Distribution/F, in this case since the drug is given orally
cl        = NCA.cl(pop, sigdigits=3)  # Clearance/F, in this case since the drug is given orally
lambdaz   = NCA.lambdaz(pop, threshold=3, sigdigits=3)  # Terminal Elimination Rate Constant, threshold=3 specifies the max no. of time point used for calculation
lambdaz_1 = NCA.lambdaz(pop, slopetimes=[8,12,16].*timeu, sigdigits=3) # slopetimes in this case specifies the exact time point you want for the calculation
thalf     = NCA.thalf(pop[4], sigdigits=3) # Half-life calculation for 4th individual
cmax_d    = NCA.cmax(pop, normalize=true, sigdigits=3) # Dose Normalized Cmax
mrt       = NCA.mrt(pop, sigdigits=3) # Mean residence time
aumc      = NCA.aumc(pop, method=:linlog, sigdigits=3) # AUMC calculation, using :linlog method
rename!(lambdaz_1, Dict(:lambdaz => "lambdaz_specf")) #since we have two lambdaz calculation rename one column to merge in a dataframe
df_1      = join(vz,cl,lambdaz, lambdaz_1,cmax_d,mrt,aumc, on=[:id], kind=:inner, makeunique=true)
```

##### Calculate AUC at specific intervals

Calculation of **AUC** at _specific time_ intervals and merge to the final report dataframe

```julia
auc0_12   = NCA.auc(pop, interval=(0,12).*timeu, method=:linuplogdown, sigdigits=3) #various other methods are :linear, :linlog
rename!(auc0_12, Dict(:auc => "auc0_12"))
auc12_24  = NCA.auc(pop, interval=(12,24).*timeu, method=:linuplogdown, sigdigits=3)
rename!(auc12_24, Dict(:auc => "auc12_24"))
final     = join(report, auc0_12, auc12_24, on = [:id], kind=:inner, makeunique=true)
```

You can select the colums that you wish to see in the output

**Note:** Since this drug is given orally the parameters returned by NCA are **apparent** Volume of Distribution (Vz/F) and Clearance (Cl/F) where F is the bioavailability.

```julia
df3       = select(final, :doseamt, :lambda_z, :half_life, :cmax, :tmax, :auclast, :aucinf_obs, :vz_f_obs, :cl_f_obs, :aumcinf_obs, :auc0_12, :auc12_24)
```

Compute the Statistics of the selected variables that you require

```julia
Stat_report = describe(df3)
```

#### Multiple-dose NCA

In the case of multiple-dose NCA the extra parameters which are calculated based on the dosing interval (Ï„) will be included in the output.

```julia
pop1       = read_nca( df1,
                       id    = :ID,
                       time  = :TIME,
                       conc  = :DV,
                       amt   = :AMT,
                       route = :ROUTE,
                       ii    = :II,        # please specify II for Multiple-dose NCA
                       llq   = 0.001concu,
                       timeu = timeu,
                       concu = concu,
                       amtu  = amtu)
report1    = NCAReport(pop1, sigdigits=3)
```

Similar to the Single-NCA you can compute individual parameters and merge them to the final report

You can select the colums that you wish to see in the output

```julia
df5        = select(report1, :doseamt, :lambda_z, :half_life, :tmax, :cmax, :auclast, :aucinf_obs, :vz_f_obs, :cl_f_obs, :aumcinf_obs, :tau, :cavgss)
```

Compute the Statistics of the selected variables that you require

```julia
Stat_report1 = describe(df5)
```

#### Documentation

Please refer to the [NCA Documentation](https://docs.pumas.ai/dev/basics/nca/) for any further help.

#### Save NCA Report

The NCA report can be saved as a CSV file for further analysis

```julia
CSV.write("NCA_Single.csv", final)      # Single-NCA final report
CSV.write("NCA_Multiple.csv", report1)  # Multiple-NCA final report
```


#### Nonparametric Superpositioning

```julia

```
